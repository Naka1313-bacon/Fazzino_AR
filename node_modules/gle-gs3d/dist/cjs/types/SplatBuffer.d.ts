import { Quaternion, Vector3, Vector4 } from "three";
export interface CompressionLevel {
    BytesPerPosition: number;
    BytesPerScale: number;
    BytesPerColor: number;
    BytesPerRotation: number;
    ScaleRange: number;
}
export declare class SplatBuffer {
    static PositionComponentCount: number;
    static ScaleComponentCount: number;
    static RotationComponentCount: number;
    static ColorComponentCount: number;
    static CompressionLevels: {
        [index: number]: CompressionLevel;
    };
    static CovarianceSizeFloats: number;
    static CovarianceSizeBytes: number;
    static HeaderSizeBytes: number;
    bucketBlockSize: number;
    bucketCount: number;
    bucketSize: number;
    bucketsBase?: number;
    bytesPerBucket: number;
    bytesPerColor: number;
    bytesPerPosition: number;
    bytesPerRotation: number;
    bytesPerScale: number;
    bytesPerSplat: number;
    colorArray?: Uint8Array;
    compressionLevel: number;
    compressionScaleFactor: number;
    compressionScaleRange: number;
    halfBucketBlockSize: number;
    headerArray: Uint8Array;
    headerBufferData: ArrayBuffer;
    positionArray?: Float32Array | Uint16Array;
    precomputedCovarianceBufferData: ArrayBuffer | null;
    rotationArray?: Float32Array | Uint16Array;
    scaleArray?: Float32Array | Uint16Array;
    splatBufferData: ArrayBuffer;
    splatCount: number;
    constructor(bufferData: ArrayBuffer);
    linkBufferArrays(): void;
    fbf(f: any): any;
    tbf(f: any): any;
    buildPreComputedBuffers(): void;
    getHeaderBufferData(): ArrayBuffer;
    getSplatBufferData(): ArrayBuffer;
    getPosition(index: number, outPosition?: Vector3): Vector3;
    setPosition(index: number, position: Vector3): void;
    getScale(index: number, outScale?: Vector3): Vector3;
    setScale(index: number, scale: Vector3): void;
    getRotation(index: number, outRotation?: Quaternion): Quaternion;
    setRotation(index: number, rotation: Quaternion): void;
    getColor(index: number, outColor?: Vector4): Vector4;
    setColor(index: number, color: Vector4): void;
    getPrecomputedCovarianceBufferData(): ArrayBuffer | null;
    getSplatCount(): number;
    fillPositionArray(outPositionArray: Float32Array | Uint16Array): void;
    fillScaleArray(outScaleArray: Float32Array | Uint16Array): void;
    fillRotationArray(outRotationArray: Float32Array | Uint16Array): void;
    fillColorArray(outColorArray: Uint8Array): void;
    swapVertices(indexA: number, indexB: number): void;
}
