import { InstancedBufferGeometry, Mesh, ShaderMaterial, Vector2 } from "three";
import { SplatTree } from './splattree/SplatTree';
import { SplatBuffer } from "./SplatBuffer";
import { SplatDataTextures } from "./SplatMesh.types";
export declare class SplatMesh extends Mesh {
    centerColors?: Uint32Array;
    centers?: Float32Array;
    colors?: Uint8Array;
    covariances?: Float32Array;
    halfPrecisionCovariancesOnGPU: boolean;
    splatAlphaRemovalThreshold: number;
    splatBuffer: SplatBuffer;
    splatDataTextures: SplatDataTextures | null;
    splatTree: SplatTree | null;
    shaderMaterial: ShaderMaterial;
    instancedBufferGeometry: InstancedBufferGeometry;
    static buildMesh(splatBuffer: SplatBuffer, splatAlphaRemovalThreshold?: number, halfPrecisionCovariancesOnGPU?: boolean): SplatMesh;
    constructor(splatBuffer: SplatBuffer, geometry: InstancedBufferGeometry, material: ShaderMaterial, splatAlphaRemovalThreshold?: number, halfPrecisionCovariancesOnGPU?: boolean);
    static buildMaterial(): ShaderMaterial;
    static buildGeometry(splatBuffer: any): InstancedBufferGeometry;
    buildSplatTree(): void;
    getSplatTree(): SplatTree | null;
    resetLocalSplatDataAndTexturesFromSplatBuffer(): void;
    updateLocalSplatDataFromSplatBuffer(): void;
    allocateAndStoreLocalSplatDataInTextures(): void;
    updateSplatDataToDataTextures(): void;
    updateLocalCovarianceDataToDataTexture(): void;
    updateLocalCenterColorDataToDataTexture(): void;
    updateIndexes(indexes: Uint32Array, renderSplatCount: number): void;
    updateUniforms(renderDimensions: Vector2, cameraFocalLength: number): void;
    getSplatDataTextures(): SplatDataTextures | null;
    getSplatCount(): number;
    getCenters(): Float32Array | undefined;
    getColors(): Uint8Array | undefined;
    getCovariances(): Float32Array | undefined;
}
